--[[ 
    EAM Hub Script for Project Delta
    Features: ESP, Aim Assist, Health Bars, Smooth Aim, RGB Neon Chams, Snapline to Target
]]

-- Services
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")

-- Configuration Settings
local ESPSettings = {
	BoxColor = Color3.new(1, 0, 0),             -- Color for ESP boxes
	HealthBarColor = Color3.new(0, 1, 0),      -- Color for health bars
	SnaplineColor = Color3.new(0, 0, 1),        -- Color for snapline
	Transparency = 0.7,                         -- Transparency for ESP elements
	MaxDistance = 10000,                        -- Maximum distance for ESP
	ShowBoxes = true,                           -- Toggle for ESP boxes
	ShowHealth = true,                          -- Toggle for health bars
	UseNeonChams = true,                        -- Toggle for Neon Chams
}

-- State Variables
local aimAssistEnabled = false
local silentAimEnabled = false
local espEnabled = true
local aimSpeed = 0.1
local fovRadius = 100
local crosshairSize = 10
local targetMethod = "Nearest"  -- Options: "Nearest", "Lowest Health", "Closest in FOV"

-- GUI Setup Function
local function setupGUI()
	local screenGui = Instance.new("ScreenGui", LocalPlayer:WaitForChild("PlayerGui"))
	local mainFrame = Instance.new("Frame", screenGui)
	mainFrame.Size = UDim2.new(0.3, 0, 0.5, 0)
	mainFrame.Position = UDim2.new(0.05, 0, 0.05, 0)
	mainFrame.BackgroundColor3 = Color3.new(0.1, 0.1, 0.1)
	mainFrame.BorderSizePixel = 0
	Instance.new("UICorner", mainFrame).CornerRadius = UDim.new(0, 10)

	-- Title Label
	local titleLabel = Instance.new("TextLabel", mainFrame)
	titleLabel.Size = UDim2.new(1, 0, 0, 40)
	titleLabel.Text = "EAM Hub"
	titleLabel.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
	titleLabel.TextColor3 = Color3.new(1, 1, 1)
	titleLabel.Font = Enum.Font.GothamBold
	titleLabel.TextSize = 24
	titleLabel.BorderSizePixel = 0

	-- FOV Circle
	local FOVCircle = Instance.new("Frame", screenGui)
	FOVCircle.Size = UDim2.new(0, fovRadius * 2, 0, fovRadius * 2)
	FOVCircle.Position = UDim2.new(0.5, -fovRadius, 0.5, -fovRadius)
	FOVCircle.BackgroundColor3 = Color3.new(1, 1, 1)
	FOVCircle.BackgroundTransparency = 0.5
	FOVCircle.BorderSizePixel = 0
	FOVCircle.AnchorPoint = Vector2.new(0.5, 0.5)

	-- Crosshair
	local crosshair = Instance.new("Frame", screenGui)
	crosshair.Size = UDim2.new(0, crosshairSize, 0, crosshairSize)
	crosshair.BackgroundColor3 = Color3.new(1, 0, 0)
	crosshair.Position = UDim2.new(0.5, -crosshairSize / 2, 0.5, -crosshairSize / 2)
	crosshair.AnchorPoint = Vector2.new(0.5, 0.5)

	return mainFrame, FOVCircle, crosshair
end

-- Function for Draggable GUI
local function setupDragging(mainFrame)
	local isDragging = false
	local dragStart, startPos

	local function onInputBegan(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			isDragging = true
			dragStart = input.Position
			startPos = mainFrame.Position
		end
	end

	local function onInputChanged(input)
		if isDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
			local delta = input.Position - dragStart
			mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
		end
	end
	
	local function onInputEnded(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			isDragging = false
		end
	end

	UserInputService.InputBegan:Connect(onInputBegan)
	UserInputService.InputChanged:Connect(onInputChanged)
	UserInputService.InputEnded:Connect(onInputEnded)
end

-- Create Button in GUI
local function createButton(mainFrame, labelText, positionY, callback)
	local button = Instance.new("TextButton", mainFrame)
	button.Size = UDim2.new(0.9, 0, 0, 40)
	button.Position = UDim2.new(0.05, 0, 0, positionY)
	button.Text = labelText
	button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
	button.TextColor3 = Color3.new(1, 1, 1)
	button.Font = Enum.Font.Gotham
	button.TextSize = 20
	button.BorderSizePixel = 0
	button.AutoButtonColor = false

	button.MouseButton1Click:Connect(function()
		callback()
	end)
end

local UserInputService = game:GetService("UserInputService")
local LocalPlayer = game.Players.LocalPlayer

local UserInputService = game:GetService("UserInputService")
local LocalPlayer = game.Players.LocalPlayer

-- Create Slider in GUI
local function createSlider(mainFrame, labelText, positionY, minValue, maxValue, defaultValue, setter)
	-- Create label
	local label = Instance.new("TextLabel", mainFrame)
	label.Size = UDim2.new(1, 0, 0, 30)
	label.Position = UDim2.new(0, 10, 0, positionY)
	label.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
	label.TextColor3 = Color3.new(1, 1, 1)
	label.Text = labelText .. ": " .. tostring(defaultValue)

	-- Create slider frame
	local slider = Instance.new("Frame", mainFrame)
	slider.Size = UDim2.new(1, 0, 0, 10)
	slider.Position = UDim2.new(0, 0, 0, positionY + 30)
	slider.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
	slider.Active = true -- Ensure the slider can receive input
	slider.Selectable = true -- Allow the slider to be selected

	-- Create slider bar
	local sliderBar = Instance.new("Frame", slider)
	sliderBar.Size = UDim2.new((defaultValue - minValue) / (maxValue - minValue), 0, 1, 0)
	sliderBar.BackgroundColor3 = Color3.fromRGB(255, 0, 0)

	-- Update the slider value on mouse input
	local function updateSlider(mouseX)
		local newValue = math.clamp(mouseX - slider.AbsolutePosition.X, 0, slider.AbsoluteSize.X)
		local value = (newValue / slider.AbsoluteSize.X) * (maxValue - minValue) + minValue
		sliderBar.Size = UDim2.new((value - minValue) / (maxValue - minValue), 0, 1, 0)
		label.Text = labelText .. ": " .. string.format("%.2f", value)
		setter(value)
	end

	-- Handle mouse button down event
	slider.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			updateSlider(LocalPlayer:GetMouse().X)

			-- Listen for mouse movement while the button is held down
			local connection
			connection = UserInputService.InputChanged:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseMovement then
					updateSlider(input.Position.X)
				end
			end)

			-- Stop listening when the mouse button is released
			UserInputService.InputEnded:Wait()
			connection:Disconnect()
		end
	end)
end



-- Create Dropdown Menu in GUI
local function createDropdown(mainFrame, labelText, positionY, options, setter)
	local label = Instance.new("TextLabel", mainFrame)
	label.Size = UDim2.new(1, 0, 0, 30)
	label.Position = UDim2.new(0, 10, 0, positionY)
	label.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
	label.TextColor3 = Color3.new(1, 1, 1)
	label.Text = labelText

	local dropdown = Instance.new("TextButton", mainFrame)
	dropdown.Size = UDim2.new(1, 0, 0, 30)
	dropdown.Position = UDim2.new(0, 0, 0, positionY + 30)
	dropdown.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
	dropdown.TextColor3 = Color3.new(1, 1, 1)
	dropdown.Text = options[1]
	dropdown.TextSize = 18

	local optionList = Instance.new("Frame", mainFrame)
	optionList.Size = UDim2.new(1, 0, 0, 0)
	optionList.Position = UDim2.new(0, 0, 0, positionY + 60)
	optionList.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
	optionList.Visible = false

	for _, option in ipairs(options) do
		local optionButton = Instance.new("TextButton", optionList)
		optionButton.Size = UDim2.new(1, 0, 0, 30)
		optionButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
		optionButton.Text = option
		optionButton.TextColor3 = Color3.new(1, 1, 1)

		optionButton.MouseButton1Click:Connect(function()
			dropdown.Text = option
			setter(option)
			optionList.Visible = false
		end)
	end

	dropdown.MouseButton1Click:Connect(function()
		optionList.Visible = not optionList.Visible
	end)
end

-- Notify Function for Notifications
local function notify(message)
	local notification = Instance.new("TextLabel", CoreGui)
	notification.Size = UDim2.new(0.3, 0, 0, 50)
	notification.Position = UDim2.new(0.5, -75, 0.9, 0)
	notification.BackgroundColor3 = Color3.new(0, 0, 0)
	notification.TextColor3 = Color3.new(1, 1, 1)
	notification.Text = message
	notification.TextSize = 20
	notification.BorderSizePixel = 0

	wait(2)  -- Display for 2 seconds
	notification:Destroy()
end

-- Skeleton ESP Class Definition
local SkeletonESP = {}
SkeletonESP.__index = SkeletonESP

-- Constructor
function SkeletonESP.new(player)
	local self = setmetatable({}, SkeletonESP)
	self.player = player
	self.skeletonParts = {}

	self:initialize()
	return self
end

-- Initialize Skeleton ESP for the player
function SkeletonESP:initialize()
	if not self.player.Character or not self.player.Character:FindFirstChild("HumanoidRootPart") then return end

	-- Create Skeleton ESP parts
	self:createSkeleton()

	-- Update Skeleton ESP when player moves
	self:updateESPConnection()
end

-- Create Skeleton visualization
function SkeletonESP:createSkeleton()
	local character = self.player.Character
	local humanoid = character:FindFirstChildOfClass("Humanoid")

	if humanoid then
		-- Create joints for skeleton visualization
		for _, part in ipairs(character:GetChildren()) do
			if part:IsA("MeshPart") or part:IsA("Part") then
				local line = Instance.new("Line", CoreGui)
				line.Color = Color3.new(1, 0, 0)  -- Color of skeleton lines
				line.Thickness = 2
				line.ZIndex = 5

				-- Connect the line to the HumanoidRootPart and each part
				if part.Name ~= "HumanoidRootPart" then
					line.From = character.HumanoidRootPart.Position
					line.To = part.Position
				end

				table.insert(self.skeletonParts, line)
			end
		end
	end
end

-- Update Skeleton ESP on player movement
function SkeletonESP:updateESPConnection()
	self.player.Character.HumanoidRootPart:GetPropertyChangedSignal("CFrame"):Connect(function() self:updateSkeleton() end)
end

-- Update Skeleton elements
function SkeletonESP:updateSkeleton()
	if self.player.Character and self.player.Character:FindFirstChild("HumanoidRootPart") then
		local rootPart = self.player.Character.HumanoidRootPart

		for _, line in ipairs(self.skeletonParts) do
			line.From = rootPart.Position
			line.To = line.To -- Update this to connect to the corresponding part if needed
		end
	end
end

-- Clean up Skeleton ESP when done
function SkeletonESP:destroy()
	for _, line in ipairs(self.skeletonParts) do line:Destroy() end
end

-- Manage Skeleton ESP Instances
local skeletonEspInstances = {}


-- Find Closest Player within FOV
local function findClosestPlayerInFOV()
	local closestPlayer = nil
	local closestDistance = fovRadius

	for _, player in ipairs(Players:GetPlayers()) do
		if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
			local rootPart = player.Character.HumanoidRootPart
			local screenPosition, onScreen = workspace.CurrentCamera:WorldToScreenPoint(rootPart.Position)

			if onScreen then
				local mousePos = UserInputService:GetMouseLocation()
				local distanceFromCenter = (Vector2.new(mousePos.X, mousePos.Y) - Vector2.new(screenPosition.X, screenPosition.Y)).Magnitude

				if distanceFromCenter < closestDistance then
					closestDistance = distanceFromCenter
					closestPlayer = player
				end
			end
		end
	end

	return closestPlayer
end

local espInstances = {}

-- Update ESP for all players
local function updateESP()
	for _, player in ipairs(Players:GetPlayers()) do
		if player ~= LocalPlayer and espEnabled then
			if not espInstances[player] then
				espInstances[player] = SkeletonESP.new(player)
			end
			espInstances[player]:updateESP()
		elseif espInstances[player] then
			espInstances[player]:destroy()
			espInstances[player] = nil
		end
	end
end

-- Snapline Drawing
local function drawSnapline(targetPlayer)
	if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
		local rootPart = targetPlayer.Character.HumanoidRootPart
		local screenPosition, onScreen = workspace.CurrentCamera:WorldToScreenPoint(rootPart.Position)

		if onScreen then
			local line = Instance.new("Line", CoreGui)
			line.From = Vector3.new(0, 0, 0)
			line.To = rootPart.Position
			line.Color = ESPSettings.SnaplineColor
			line.Thickness = 2
			line.ZIndex = 5
			line.CFrame = CFrame.new(Vector3.new(0, 0, 0), rootPart.Position)
		end
	end
end

-- Main Loop for ESP and Targeting Updates
RunService.RenderStepped:Connect(function()
	updateESP()

	if aimAssistEnabled then
		local targetPlayer = findClosestPlayerInFOV()
		if targetPlayer then
			drawSnapline(targetPlayer)

			-- Aim towards target (implement smooth aiming logic here)
			local rootPart = targetPlayer.Character.HumanoidRootPart
			local camera = workspace.CurrentCamera
			local targetPos = rootPart.Position

			local smoothness = aimSpeed
			camera.CFrame = CFrame.new(camera.CFrame.Position, targetPos) -- Modify for smooth aim
		end
	end
end)

-- Initialize GUI
local mainFrame, FOVCircle, crosshair = setupGUI()
setupDragging(mainFrame)

-- Create Buttons and Sliders
createButton(mainFrame, "Toggle ESP", 50, function() espEnabled = not espEnabled end)
createButton(mainFrame, "Toggle Aim Assist", 100, function() aimAssistEnabled = not aimAssistEnabled end)
createButton(mainFrame, "Toggle Silent Aim", 150, function() silentAimEnabled = not silentAimEnabled end)
createSlider(mainFrame, "Aim Speed", 200, 0.01, 1, aimSpeed, function(value) aimSpeed = value end)
createDropdown(mainFrame, "Target Method", 250, {"Nearest", "Lowest Health", "Closest in FOV"}, function(value) targetMethod = value end)

-- Cleanup on exit
game:BindToClose(function()
	for _, espInstance in pairs(espInstances) do
		espInstance:destroy()
	end
end)
